{"ast":null,"code":"import React, { useRef } from 'react';\nimport { useDrag } from '@use-gesture/react';\nimport { ThumbIcon } from './thumb-icon';\nconst classPrefix = `adm-slider`;\n\nconst Thumb = props => {\n  const {\n    value,\n    min,\n    max,\n    disabled,\n    onDrag\n  } = props;\n  const prevValue = useRef(value);\n\n  const currentPosition = () => {\n    return {\n      left: `${(value - min) / (max - min) * 100}%`,\n      right: 'auto'\n    };\n  };\n\n  const bind = useDrag(state => {\n    var _a;\n\n    if (disabled) return;\n\n    if (state.first) {\n      prevValue.current = value;\n    }\n\n    const x = state.xy[0] - state.initial[0];\n    const sliderOffsetWith = (_a = props.trackRef.current) === null || _a === void 0 ? void 0 : _a.offsetWidth;\n    if (!sliderOffsetWith) return;\n    const diff = x / Math.ceil(sliderOffsetWith) * (max - min);\n    onDrag(prevValue.current + diff, state.first, state.last);\n  }, {\n    axis: 'x',\n    pointer: {\n      touch: true\n    }\n  });\n  return React.createElement(\"div\", Object.assign({\n    className: `${classPrefix}-thumb-container`,\n    style: currentPosition()\n  }, bind()), React.createElement(\"div\", {\n    className: `${classPrefix}-thumb`\n  }, React.createElement(ThumbIcon, {\n    className: `${classPrefix}-thumb-icon`\n  })));\n};\n\nexport default Thumb;","map":{"version":3,"sources":["E:/wcy/Github/fun-rec/codes/news_recsys/news_rec_web/my-app-ts/node_modules/antd-mobile/es/components/slider/thumb.js"],"names":["React","useRef","useDrag","ThumbIcon","classPrefix","Thumb","props","value","min","max","disabled","onDrag","prevValue","currentPosition","left","right","bind","state","_a","first","current","x","xy","initial","sliderOffsetWith","trackRef","offsetWidth","diff","Math","ceil","last","axis","pointer","touch","createElement","Object","assign","className","style"],"mappings":"AAAA,OAAOA,KAAP,IAAgBC,MAAhB,QAA8B,OAA9B;AACA,SAASC,OAAT,QAAwB,oBAAxB;AACA,SAASC,SAAT,QAA0B,cAA1B;AACA,MAAMC,WAAW,GAAI,YAArB;;AAEA,MAAMC,KAAK,GAAGC,KAAK,IAAI;AACrB,QAAM;AACJC,IAAAA,KADI;AAEJC,IAAAA,GAFI;AAGJC,IAAAA,GAHI;AAIJC,IAAAA,QAJI;AAKJC,IAAAA;AALI,MAMFL,KANJ;AAOA,QAAMM,SAAS,GAAGX,MAAM,CAACM,KAAD,CAAxB;;AAEA,QAAMM,eAAe,GAAG,MAAM;AAC5B,WAAO;AACLC,MAAAA,IAAI,EAAG,GAAE,CAACP,KAAK,GAAGC,GAAT,KAAiBC,GAAG,GAAGD,GAAvB,IAA8B,GAAI,GADtC;AAELO,MAAAA,KAAK,EAAE;AAFF,KAAP;AAID,GALD;;AAOA,QAAMC,IAAI,GAAGd,OAAO,CAACe,KAAK,IAAI;AAC5B,QAAIC,EAAJ;;AAEA,QAAIR,QAAJ,EAAc;;AAEd,QAAIO,KAAK,CAACE,KAAV,EAAiB;AACfP,MAAAA,SAAS,CAACQ,OAAV,GAAoBb,KAApB;AACD;;AAED,UAAMc,CAAC,GAAGJ,KAAK,CAACK,EAAN,CAAS,CAAT,IAAcL,KAAK,CAACM,OAAN,CAAc,CAAd,CAAxB;AACA,UAAMC,gBAAgB,GAAG,CAACN,EAAE,GAAGZ,KAAK,CAACmB,QAAN,CAAeL,OAArB,MAAkC,IAAlC,IAA0CF,EAAE,KAAK,KAAK,CAAtD,GAA0D,KAAK,CAA/D,GAAmEA,EAAE,CAACQ,WAA/F;AACA,QAAI,CAACF,gBAAL,EAAuB;AACvB,UAAMG,IAAI,GAAGN,CAAC,GAAGO,IAAI,CAACC,IAAL,CAAUL,gBAAV,CAAJ,IAAmCf,GAAG,GAAGD,GAAzC,CAAb;AACAG,IAAAA,MAAM,CAACC,SAAS,CAACQ,OAAV,GAAoBO,IAArB,EAA2BV,KAAK,CAACE,KAAjC,EAAwCF,KAAK,CAACa,IAA9C,CAAN;AACD,GAdmB,EAcjB;AACDC,IAAAA,IAAI,EAAE,GADL;AAEDC,IAAAA,OAAO,EAAE;AACPC,MAAAA,KAAK,EAAE;AADA;AAFR,GAdiB,CAApB;AAoBA,SAAOjC,KAAK,CAACkC,aAAN,CAAoB,KAApB,EAA2BC,MAAM,CAACC,MAAP,CAAc;AAC9CC,IAAAA,SAAS,EAAG,GAAEjC,WAAY,kBADoB;AAE9CkC,IAAAA,KAAK,EAAEzB,eAAe;AAFwB,GAAd,EAG/BG,IAAI,EAH2B,CAA3B,EAGKhB,KAAK,CAACkC,aAAN,CAAoB,KAApB,EAA2B;AACrCG,IAAAA,SAAS,EAAG,GAAEjC,WAAY;AADW,GAA3B,EAETJ,KAAK,CAACkC,aAAN,CAAoB/B,SAApB,EAA+B;AAChCkC,IAAAA,SAAS,EAAG,GAAEjC,WAAY;AADM,GAA/B,CAFS,CAHL,CAAP;AAQD,CA7CD;;AA+CA,eAAeC,KAAf","sourcesContent":["import React, { useRef } from 'react';\nimport { useDrag } from '@use-gesture/react';\nimport { ThumbIcon } from './thumb-icon';\nconst classPrefix = `adm-slider`;\n\nconst Thumb = props => {\n  const {\n    value,\n    min,\n    max,\n    disabled,\n    onDrag\n  } = props;\n  const prevValue = useRef(value);\n\n  const currentPosition = () => {\n    return {\n      left: `${(value - min) / (max - min) * 100}%`,\n      right: 'auto'\n    };\n  };\n\n  const bind = useDrag(state => {\n    var _a;\n\n    if (disabled) return;\n\n    if (state.first) {\n      prevValue.current = value;\n    }\n\n    const x = state.xy[0] - state.initial[0];\n    const sliderOffsetWith = (_a = props.trackRef.current) === null || _a === void 0 ? void 0 : _a.offsetWidth;\n    if (!sliderOffsetWith) return;\n    const diff = x / Math.ceil(sliderOffsetWith) * (max - min);\n    onDrag(prevValue.current + diff, state.first, state.last);\n  }, {\n    axis: 'x',\n    pointer: {\n      touch: true\n    }\n  });\n  return React.createElement(\"div\", Object.assign({\n    className: `${classPrefix}-thumb-container`,\n    style: currentPosition()\n  }, bind()), React.createElement(\"div\", {\n    className: `${classPrefix}-thumb`\n  }, React.createElement(ThumbIcon, {\n    className: `${classPrefix}-thumb-icon`\n  })));\n};\n\nexport default Thumb;"]},"metadata":{},"sourceType":"module"}